---
// @ts-nocheck
import { getImage, Picture } from "astro:assets";
import { getCachedImage } from "@lib/image_cache";
import type { Image } from "@lib/types";
import type { GetImageResult } from "astro";
import { getBase64Placeholder } from "@lib/image_placeholder";

import DynamicGallery from "./gallery.svelte";

interface Props {
    images: Image[];
}

const { images } = Astro.props;

const astro_images = await import.meta.glob<{ default: ImageMetadata }>(
    "/src/assets/*.{webp,jpeg,jpg,png,gif}",
);

const processed_images = await Promise.all(
    images.map(async (image) => {
        const url = await getCachedImage(image);

        const thumbnail = await getImage({
            src: astro_images[url](),
            width: 100,
            height: 100,
        });

        const dynamic_image = await getImage({
            src: astro_images[url](),
            format: "webp",
            fallbackFormat: "jpg",
            widths: [360, 540, 720, 1200, 1600, image.width],
            sizes: `(max-width: 360px) 360px, (max-width: 540px) 540px, (max-width: 720px) 720px, (max-width: 1200px) 1200px, (max-width: 1600px) 1600px, ${image.width}px`,
        });

        const base64 = import.meta.env.PROD
            ? await getBase64Placeholder(url)
            : "";

        return {
            ...dynamic_image,
            width: image.width,
            height: image.height,
            base64: base64,
            thumbnail: thumbnail.src,
        };
    }),
);
---


<DynamicGallery client:load images={processed_images} />